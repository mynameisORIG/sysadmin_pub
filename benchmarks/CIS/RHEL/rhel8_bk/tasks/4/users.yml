- name: "4.5 | User Accounts and Environments"
  become: true
  hosts: rhel
  vars_files: 
    - ../../defaults/main.yml
  vars:
    file:
      - /etc/login.defs
      - /etc/profile
      - /etc/bashrc
  handlers:
    - import_tasks: ../../handlers/main.yml
  tasks:

    - name: "4.5.1.2 | Ensure password expiration is 365 days or less"
      lineinfile:
        path: "{{ file[0] }}"
        regexp: '^PASS_MAX_DAYS'
        line: "PASS_MAX_DAYS {{ pass['max_days'] }}"

    - name: "4.5.1.3 | Ensure password expiration warning days is 7 or more"
      lineinfile:
        path: "{{ file[0] }}"
        regexp: '^PASS_WARN_AGE'
        line: "PASS_WARN_AGE {{ pass['warn_age'] }}"

    - name: "4.5.1.4 | Ensure inactive password lock is 30 days or less"
      block:
        - name: "4.5.1.4 | Ensure inactive password lock is 30 days or less | Check current settings"
          shell: useradd -D | grep INACTIVE={{ inactivelock.lock_days }} | cut -f2 -d=
          changed_when: false
          failed_when: false
          check_mode: false
          register: inactive_settings

        - name: "4.5.1.4 | Ensure inactive password lock is 30 days or less | Set default inactive setting"
          shell: useradd -D -f {{ inactivelock.lock_days }}
          when: inactive_settings.stdout | length == 0

        - name: "4.5.1.4 | Ensure inactive password lock is 30 days or less | Getting user list"
          shell: "awk -F: '/^[^#:]+:[^\\!\\*:]*:[^:]*:[^:]*:[^:]*:[^:]*:(\\s*|-1|3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):[^:]*:[^:]*\\s*$/ {print $1}' /etc/shadow"
          changed_when: false
          check_mode: false
          register: user_list

        - name: "4.5.1.4 | Ensure inactive password lock is 30 days or less | Apply Inactive setting to existing accounts"
          shell: "chage --inactive {{ inactivelock.lock_days }} {{ item }}"
          with_items:
              - "{{ user_list.stdout_lines }}"

    - name: "4.5.1.5 | Ensure all users last password change date is in the past"
      block:
        - name: "4.5.1.5 | Ensure all users last password change date is in the past | Get current date in Unix Time"
          shell: echo $(($(date --utc --date "$1" +%s)/86400))
          changed_when: false
          failed_when: false
          check_mode: false
          register: currentut

        - name: "4.5.1.5 | Ensure all users last password change date is in the past | Get list of users with last changed pw date in the future"
          shell: "cat /etc/shadow | awk -F: '{if($3>{{ currentut.stdout }})print$1}'"
          changed_when: false
          failed_when: false
          check_mode: false
          register: user_list

        - name: "4.5.1.5 | Ensure all users last password change date is in the past | Alert no pw change in the future exist"
          debug:
            msg: "Good News! All accounts have PW change dates that are in the past"
          when: user_list.stdout | length == 0

        - name: "4.5.1.5 | Ensure all users last password change date is in the past | Alert on accounts with pw change in the future"
          debug:
            msg: "Warning!! The following accounts have the last PW change date in the future: {{ user_list.stdout_lines }}"
          when:
            - user_list.stdout | length > 0
            - not futurepwchgdate_autofix

        - name: "4.5.1.5 | Ensure all users last password change date is in the past| Warn Count"
          import_tasks: ../warning_facts.yml
          when:
            - user_list.stdout | length > 0
            - not futurepwchgdate_autofix

        - name: "4.5.1.5 | PATCH | Ensure all users last password change date is in the past | Fix accounts with pw change in the future"
          ansible.builtin.shell: passwd --expire {{ item }}
          when:
            - user_list | length > 0
            - futurepwchgdate_autofix
          with_items:
            - "{{ user_list.stdout_lines }}"
          
    - name: 4.5.2.1 | Ensure default group for the root account is GID 0
      command: 'usermod -g 0 root'

    - name: '4.5.2.2 | Ensure root user umask is configured'
      lineinfile:
        path: "{{ item.file }}"
        line: 'umask 027'
      become: true
      with_items:
        - { file: '/root/.bashrc' }
        - { file: '/root/.bash_profile' }

    - name: 4.5.2.3 | Ensure system accounts are secured
      lineinfile:
        path: /etc/default/useradd
        line: '{{ item.line }}'
        regexp: '{{ item.regexp }}'
      with_items:
        - { regexp: '^CREATE_HOME', line: 'CREATE_HOME yes' }
        - { regexp: '^INACTIVE', line: 'INACTIVE -1' }
        - { regexp: '^EXPIRE', line: 'EXPIRE' }
      become: true

    # 4.5.2.4 needs the real password in order to automate this. Recommend doing this manually

    - name: 4.5.3.1 | Ensure nologin is not listed in /etc/shells
      lineinfile:
        path: /etc/shells
        state: absent
        regexp: '^.*nologin$'

    - name: 4.5.3.2 | Ensure default user shell timeout is configured
      blockinfile:
        path: /etc/profile
        block: |
          # Set default user shell timeout
          TMOUT=300
          readonly TMOUT
          export TMOUT
        marker: "# {mark} ANSIBLE MANAGED BLOCK"

    - name: 4.5.3.3 | Ensure default user umask is configured
      lineinfile:
        path: /etc/profile
        line: 'umask 027'

    - name: "5.6.1.2 | Ensure minimum days between password changes is 7 or more"
      lineinfile:
        path: "{{ file[0] }}"
        regexp: '^PASS_MIN_DAYS'
        line: "PASS_MIN_DAYS {{ pass['min_days'] }}"

    - name: "5.6.2 | Ensure system accounts are secured"
      block:
        - name: "5.6.2 | Ensure system accounts are secured | Set nologin"
          user:
            name: "{{ item.id }}"
            shell: /usr/sbin/nologin
          with_items:
              - "{{ passwd }}"
          when:
            - item.id != "root"
            - item.id != "sync"
            - item.id != "shutdown"
            - item.id != "halt"
            - item.uid < rhel8uid_interactive_uid_start | int
            - item.shell != "/bin/false"
            - item.shell != "/usr/sbin/nologin"
          loop_control:
            label: "{{ item.id }}"

        - name: "5.6.2 | Ensure system accounts are secured | Lock accounts"
          user:
            name: "{{ item.id }}"
            password_lock: true
          with_items:
            - "{{ passwd }}"
          when:
            - item.id != "halt"
            - item.id != "shutdown"
            - item.id != "sync"
            - item.id != "root"
            - item.id != "nfsnobody"
            - item.uid < rhel8uid_interactive_uid_start | int
            - item.shell != "/bin/false"
            - item.shell != "/usr/sbin/nologin"
          loop_control:
              label: "{{ item.id }}"

    - name: "5.6.3 | Ensure default user shell timeout is 900 seconds or less"
      blockinfile:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        create: true
        mode: 0644
        marker: "# {mark} ANSIBLE MANAGED"
        block: |
          # Set session timeout - CIS ID RHEL-08-5.6.3
          TMOUT={{ shell_session_timeout.timeout }}
          export TMOUT
          readonly TMOUT
      with_items:
        - { path: "{{ shell_session_timeout.file }}", state: present }
        - { path: "{{ file[1] }}", state: "{{ (shell_session_timeout.file == '/etc/profile') | ternary('present', 'absent') }}" }

    - name: "5.6.4 | Ensure default group for the root account is GID 0"
      shell: usermod -g 0 root
      changed_when: false
      failed_when: false

    - name: "5.6.5 | Ensure default user umask is 027 or more restrictive"
      block:
        - name: "5.6.5 | Ensure default user umask is 027 or more restrictive | Set umask for /etc/login.defs pam_umask settings"
          replace:
            path: "{{ file[0] }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: '(UMASK\s+)0[012][0-6]', replace: '\1 027' }
            - { regexp: '(USERGROUPS_ENAB\s+)yes', replace: '\1 no' }

        - name: "5.6.5 | Ensure default user umask is 027 or more restrictive | Set umask for /etc/bashrc and /etc/profile"
          replace:
            path: "{{ item }}"
            regexp: '(^\s+umask) 0[012][0-6]'
            replace: '\1 027'
          with_items:
            - "{{ file[2] }}"
            - "{{ file[1] }}"